import React, { useState, useEffect } from "react";
import "./App.css";
import { GoogleGenerativeAI } from "@google/generative-ai";
import ReactMarkdown from "react-markdown";
import {
  Sun,
  Moon,
  Upload,
  FileText,
  Github,
  Linkedin,
  Loader2,
  Send,
  AlertCircle,
  CheckCircle,
  AlertTriangle,
} from "lucide-react";

function App() {
  const [input, setInput] = useState("");
  const [file, setFile] = useState(null);
  const [result, setResult] = useState("");
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("text");
  const [darkMode, setDarkMode] = useState(false);
  const [fileName, setFileName] = useState("");

  useEffect(() => {
    const savedTheme = localStorage.getItem("theme");
    if (
      savedTheme === "dark" ||
      (!savedTheme && window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      setDarkMode(true);
      document.body.classList.add("dark-theme");
    }
  }, []);

  const toggleTheme = () => {
    setDarkMode(!darkMode);
    if (!darkMode) {
      document.body.classList.add("dark-theme");
      localStorage.setItem("theme", "dark");
    } else {
      document.body.classList.remove("dark-theme");
      localStorage.setItem("theme", "light");
    }
  };

  const handleInputChange = (e) => {
    setInput(e.target.value);
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
      setFileName(selectedFile.name);
    } else {
      setFile(null);
      setFileName("");
    }
  };

  const handleFileClick = () => {
    document.getElementById("file-input").click();
  };

  const handleSubmit = async () => {
    setLoading(true);
    setResult("");

    let textToAnalyze = input;

    if (activeTab === "file" && file) {
      try {
        const reader = new FileReader();
        reader.onload = async (e) => {
          textToAnalyze = e.target.result;
          await analyzeText(textToAnalyze);
        };
        reader.readAsText(file);
      } catch (error) {
        console.error("Error reading file:", error);
        setResult("Error reading file.");
        setLoading(false);
      }
    } else if (activeTab === "text" && input) {
      await analyzeText(textToAnalyze);
    }
  };

  const analyzeText = async (text) => {
    try {
      const genAI = new GoogleGenerativeAI(
        process.env.REACT_APP_GEMINI_API_KEY
      );
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

      const prompt = `
Analyze the following text and determine if it was likely generated by AI or written by a human.

Text to analyze:
"""
${text}
"""

Please provide:
1. Your verdict: "AI Generated" or "Human Generated"
2. Confidence level (percentage)
3. Key characteristics that led to your determination
4. Detailed analysis of linguistic patterns, stylistic elements, and structural features
5. Any recommendations for making AI-generated text appear more natural (if applicable)

Format your response in markdown. Start with a clear verdict and confidence level.
      `;

      const result = await model.generateContent(prompt);
      const responseText = result.response.text();
      setResult(responseText);
    } catch (error) {
      console.error("Gemini API error:", error);
      setResult(
        "Error analyzing text. Please check your API key and try again."
      );
    } finally {
      setLoading(false);
    }
  };

  const ResultDisplay = ({ result }) => {
    const [confidenceLevel, setConfidenceLevel] = useState(0);
    const [verdict, setVerdict] = useState("");

    useEffect(() => {
      if (result) {
        const aiMatch = result.match(/AI Generated/i);
        const humanMatch = result.match(/Human Generated/i);

        if (aiMatch) {
          setVerdict("AI Generated");
        } else if (humanMatch) {
          setVerdict("Human Generated");
        }

        const confidenceMatch = result.match(/(\d+)(%|\s*percent)/i);
        if (confidenceMatch) {
          const extractedConfidence = parseInt(confidenceMatch[1]);
          setTimeout(() => {
            setConfidenceLevel(extractedConfidence);
          }, 200);
        }
      }
    }, [result]);

    const getConfidenceClass = () => {
      if (confidenceLevel >= 80) return "high";
      if (confidenceLevel >= 50) return "medium";
      return "low";
    };

    if (!result) return null;

    return (
      <div className="result-container">
        <div className="result">
          {verdict && (
            <div
              className={`verdict-banner ${
                verdict.toLowerCase().includes("ai") ? "ai" : "human"
              }`}
            >
              {verdict.toLowerCase().includes("ai") ? (
                <AlertCircle size={20} />
              ) : (
                <CheckCircle size={20} />
              )}
              <span>{verdict}</span>
            </div>
          )}

          {confidenceLevel > 0 && (
            <div className="confidence-meter">
              <div className="confidence-header">
                <div
                  style={{ display: "flex", justifyContent: "space-between" }}
                >
                  <span>Confidence Level</span>
                  <span>
                    <strong>{confidenceLevel}%</strong>
                  </span>
                </div>
              </div>
              <div className="confidence-bar">
                <div
                  className={`confidence-fill ${getConfidenceClass()}`}
                  style={{ width: `${confidenceLevel}%` }}
                ></div>
              </div>
              {confidenceLevel < 60 && (
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "0.5rem",
                    marginTop: "0.5rem",
                    fontSize: "0.85rem",
                    color: "var(--text-color)",
                    opacity: 0.8,
                  }}
                >
                  <AlertTriangle size={16} />
                  <span>Low confidence - result may not be definitive</span>
                </div>
              )}
            </div>
          )}

          <ReactMarkdown>{result}</ReactMarkdown>
        </div>
      </div>
    );
  };

  return (
    <div className="App">
      <header>
        <div>
          <h1>AI Content Detector</h1>
          <p className="subtitle">
            Analyze content to determine if it's AI-generated or human-written
          </p>
        </div>
        <button className="theme-toggle" onClick={toggleTheme}>
          {darkMode ? <Sun size={22} /> : <Moon size={22} />}
        </button>
      </header>

      <div className="card">
        <div className="tab-buttons">
          <button
            className={`tab-button ${activeTab === "text" ? "active" : ""}`}
            onClick={() => setActiveTab("text")}
          >
            <FileText size={16} style={{ marginRight: "6px" }} />
            Enter Text
          </button>
          <button
            className={`tab-button ${activeTab === "file" ? "active" : ""}`}
            onClick={() => setActiveTab("file")}
          >
            <Upload size={16} style={{ marginRight: "6px" }} />
            Upload File
          </button>
        </div>

        <div className="input-container">
          {activeTab === "text" ? (
            <textarea
              placeholder="Enter text to analyze..."
              value={input}
              onChange={handleInputChange}
            />
          ) : (
            <div className="file-input-wrapper" onClick={handleFileClick}>
              <input
                id="file-input"
                type="file"
                accept=".txt, .docx, .pdf"
                onChange={handleFileChange}
              />
              <label className="file-input-label">
                <Upload size={36} color={darkMode ? "#a29bfe" : "#6c5ce7"} />
                <p>Click to upload a file (.txt, .docx, .pdf)</p>
                {fileName && <p className="file-name">{fileName}</p>}
              </label>
            </div>
          )}

          <button
            className="analyze-btn"
            onClick={handleSubmit}
            disabled={loading || (activeTab === "text" ? !input : !file)}
          >
            {loading ? (
              <>
                <Loader2 size={18} className="loading-spinner" />
                Analyzing...
              </>
            ) : (
              <>
                <Send size={18} />
                Analyze
              </>
            )}
          </button>
        </div>
      </div>

      {result && <ResultDisplay result={result} />}

      <footer>
        <div className="dev-info">
          <p>Developed by Ashutosh Swamy</p>
        </div>
        <div className="social-links">
          <a
            href="https://github.com/ashutoshswamy"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Github size={20} />
          </a>
          <a
            href="https://linkedin.com/in/ashutoshswamy"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Linkedin size={20} />
          </a>
        </div>
      </footer>
    </div>
  );
}

export default App;
